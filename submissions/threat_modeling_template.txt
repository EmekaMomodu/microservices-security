Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

Five potential Docker threats:

1. Spoofing
- An attacker may spoof the docker daemon or docker registry and introduce spoofed images to trick users.

2. Tampering
- Docker client and daemon configuration may be tempered with by an attacker.

3. Elevation of Privilege
- If a user is not defined in the Dockerfile and container runs as root, an attacker can access all other containers on
  the same host as root user, leading to isolation tempering.

4. Information Disclosure
- The client may expose sensitive information such as secrets that are hardcoded in configuration files that could
  impact the security of the Dockerfile. Also the Docker host file system may be mis-configured, exposing sensitive
  information and leading to insecure defaults.

5. Repudiation 
- Malicious images may be committed without authorization by an attacker. This affects image security.



Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

Five potential Kubernetes threats:

1. Spoofing 
- The connection between the API server and kubelet can be spoofed. This can be mitigated by using strong encryption
  that does not have cryptographic flaws, strong TLS ciphers should be used.

2. Tampering
- The configuration of etcd may be tampered with by an attacker, modifying vital system-level configurations such as pod
  specs. This can be mitigated by restricting permissions on etcd files to 644 or more restrictive and that the pod spec
  file is set to root ownership.

3. Elevation of Privilege 
- Kubelet can be subject to an elevation of privilege. To ensure privileges cannot be escalated, make sure the
  authorization mode argument is not set to always allow.

4. Information Disclosure
- Sensitive information may be exposed via the etcd key-value store. This can be mitigated by encrypting etcd content at
  rest and using TLS to access etcd only from the kube-apiserver. All other traffic should be rejected.

5. Repudiation
- Unauthorized changes can be made to kubelet. To avoid this, kubelet authentication should be TLS and weak/basic auth
  should not be allowed.



Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on
the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the
ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

I have chosen three findings to evaluate and remediate. Let's take a closer look at these three.

1. [FAIL] 4.5 Ensure Content trust for Docker is Enabled (Scored)
- According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security): "Content trust provides
  the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures
  allow client-side verification of the identity and the publisher of specific image tags and ensures the provenance of
  container images."
- Fix: to fix this we need to add 'export DOCKER_CONTENT_TRUST=1'

2. [FAIL] 5.12 Ensure that the container's root filesystem is mounted as read only (Scored)
- According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security): "The container's root
  filesystem should be treated as a 'golden image' by using Docker run's --read-only option. This prevents any writes to
  the container's root filesystem at container runtime and enforces the principle of immutable infrastructure."
- Fix: to fix we should add a --read-only flag at a container's runtime to enforce the container's root filesystem
  being mounted as read only;
  docker run <Run arguments> --read-only <Container Image Name or ID> <Command>

3. [FAIL] 5.25 Ensure that the container is restricted from acquiring additional privileges (Scored)
- According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security): "A process can set the
  no_new_priv bit in the kernel and this persists across forks, clones and execve. The no_new_priv bit ensures that the
  process and its child processes do not gain any additional privileges via suid or sgid bits. This reduces the danger
  associated with many operations because the possibility of subverting privileged binaries is lessened."
- Fix: to fix we should start the container with the options;
  docker run --rm -it --security-opt=no-new-privileges <Container Image Name or ID> <Command>
